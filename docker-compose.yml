services:
  savings-db:
    image: postgres:16
    container_name: savings-db
    environment:
      POSTGRES_DB: savings
      POSTGRES_USER: savings
      POSTGRES_PASSWORD: savings
    ports:
      - "5433:5432"  # 任意（ホストから直接叩く場合）
    volumes:
      - savings-data:/var/lib/postgresql/data
    networks: [app-net]

  savings-service:
    build: ./savings-service
    container_name: savings-service
    environment:
      DB_HOST: savings-db
      DB_PORT: 5432
      DB_NAME: savings
      DB_USER: savings
      DB_PASSWORD: savings
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - savings-db
    ports:
      # - "8081:8080"
      - "8081:8081"
    networks: [app-net]

  timedeposit-db:
    image: postgres:16
    container_name: timedeposit-db
    environment:
      POSTGRES_DB: timedeposit
      POSTGRES_USER: timedeposit
      POSTGRES_PASSWORD: timedeposit
    volumes:
      - timedeposit-data:/var/lib/postgresql/data
    networks: [app-net]

  time-deposit-service:
    build: ./time-deposit-service
    container_name: time-deposit-service
    environment:
      DB_HOST: timedeposit-db
      DB_PORT: 5432
      DB_NAME: timedeposit
      DB_USER: timedeposit
      DB_PASSWORD: timedeposit
      SPRING_PROFILES_ACTIVE: docker
      # SAVINGS_BASE_URL: http://savings-service:8080
      SAVINGS_BASE_URL: http://savings-service:8081
    depends_on:
      - timedeposit-db
    ports:
      # - "8082:8080"
      - "8082:8082"
    networks: [app-net]

  kong:
    image: kong:3.6
    environment:
      # DB-less & 宣言的設定（既存）
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml

      # ルータ（既に expressions を使えているのでそのまま）
      KONG_ROUTER_FLAVOR: expressions

      # ★ DNS を Docker の組込みDNSへ固定し、ブロッキングを避ける
      KONG_DNS_RESOLVER: 127.0.0.11
      KONG_DNS_NO_SYNC: "on"
      KONG_DNS_ERROR_TTL: "1"
      KONG_DNS_NOT_FOUND_TTL: "1"
      KONG_DNS_STALE_TTL: "60"
      # ★ IPv6 で詰まる環境を避けるため A(IPv4) を優先
      KONG_DNS_ORDER: A,CNAME,SRV

      # ★ コネクション再利用を有効化
      KONG_NGINX_HTTP_KEEPALIVE_TIMEOUT: 65s
      KONG_NGINX_HTTP_KEEPALIVE_REQUESTS: "1000"
      KONG_NGINX_HTTP_UPSTREAM_KEEPALIVE: "60"

      # ★ IPv4 のみでリッスン
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001

      # ★ ヘッダサイズ対策
      KONG_NGINX_PROXY_CLIENT_HEADER_BUFFER_SIZE: 16k
      KONG_NGINX_PROXY_LARGE_CLIENT_HEADER_BUFFERS: "8 16k"
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 16k
      KONG_NGINX_PROXY_PROXY_BUFFERS: "8 16k"
      KONG_NGINX_PROXY_PROXY_BUFFERING: "on"
    ports:
      - "8000:8000"  # Public gateway
      - "8001:8001"  # Admin
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml:ro
      - ./kong/kong-nginx-http.conf:/usr/local/kong/nginx-http.conf:ro
    depends_on: [mashup-savings-term-deposits, frontend]
    networks: [app-net]

  kong-database:
    image: postgres:10
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
      - ./konga/init-konga-db.sql:/docker-entrypoint-initdb.d/init-konga-db.sql
    networks: [app-net]

  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: always
    environment:
      - NODE_ENV=development
      - DB_ADAPTER=postgres
      - DB_HOST=kong-database
      - DB_USER=kong
      - DB_PASSWORD=kong
      - DB_DATABASE=konga
    ports:
      - "1337:1337"
    depends_on:
      - kong-database
    networks: [app-net]

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    command: ["start-dev","--import-realm"]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./realms:/opt/keycloak/data/import:ro
    ports:
      - "8080:8080"
    networks: [app-net]

  mashup-savings-term-deposits:
    build: ./mashup-savings-term-deposits
    container_name: mashup-savings-term-deposits
    # 公開クライアント（PKCE）で動かすため client-secret は不要
    # environment:
    #   - OIDC_CLIENT_SECRET=bff-secret
    expose:
      - "8080"
    depends_on: [keycloak, savings-service, time-deposit-service]
    networks: [app-net]

  frontend:
    build: ./frontend
    container_name: frontend
    expose:
      - "5173"
    networks: [app-net]

  mashup-balance-inquiry-only:
    build: ./mashup-balance-inquiry-only
    container_name: mashup-balance-inquiry-only
    environment:
      # 下流は直叩き（Kong 経由なし）
      SAVINGS_BASE_URL: http://savings-service:8081/api
      TIME_BASE_URL: http://time-deposit-service:8082/api
      # OIDC クライアント認証（client_credentials）
      OIDC_ISSUER: http://keycloak:8080/realms/demo-realm
      OIDC_CLIENT_ID: mashup-client
      OIDC_CLIENT_SECRET: changeit
      QUARKUS_OIDC_CLIENT_DISCOVERY_ENABLED: "false"
      QUARKUS_OIDC_CLIENT_TOKEN_PATH: /protocol/openid-connect/token
    depends_on:
      - keycloak
      - savings-service
      - time-deposit-service
    ports:
      - "9000:9000"   # デバッグ用にホストへ公開
    networks: [app-net]


volumes:
  savings-data:
  timedeposit-data:
  kong_data:

networks:
  app-net:
    driver: bridge
